import sensors.BasicSensor;
import sensors.SensorConfig;
import sensors.SensorTypeA;
import sensors.SensorTypeB;

import java.util.ArrayList;
import java.util.List;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {

    private static final String BACKEND_SERVER_NAME = "http://localhost";
    private static final int BACKEND_SERVER_PORT = 8080;
    private static final String BACKEND_SERVER_DATA_ENDPOINT = "/sensors/send-data";
    private static final String BACKEND_SERVER_STRING_DATA_ENDPOINT = "/sensors/send-string-data";


    public static void main(String[] args) {
        System.out.println("Initializing sensor orchestrator");

        /** Initializing and starting the many different sensors **/
        List<BasicSensor> sensors = new ArrayList<>();
        sensors.add(createSensorTypeA("SensorA1", 3939, 1000, 3941));
        sensors.add(createSensorTypeA("SensorA2", 3940, 1500, 3942));
        sensors.add(createSensorTypeB("SensorB1", 3941, 1000));
        sensors.add(createSensorTypeB("SensorB2", 3942, 1500));

        sensors.forEach(BasicSensor::sensorOn);
    }

    /** Create instance of Sensor Type B (string value return sensor) **/
    static SensorTypeB createSensorTypeB(String name, int listenerPort, int pollingInterval) {
        SensorConfig sensorConfigB = new SensorConfig();
        sensorConfigB.setServerHost(BACKEND_SERVER_NAME);
        sensorConfigB.setServerPort(BACKEND_SERVER_PORT);
        sensorConfigB.setServerDataEndPoint(BACKEND_SERVER_STRING_DATA_ENDPOINT);
        sensorConfigB.setPollingInterval(pollingInterval);
        sensorConfigB.setListenerPort(listenerPort);
        sensorConfigB.setSensorName(name);

        return new SensorTypeB(sensorConfigB);
    }
    /** Create instance of Sensor Type A (float value return sensor) **/
    static SensorTypeA createSensorTypeA(String name, int listenerPort, int pollingInterval, int targetSensorPort) {
        SensorConfig sensorConfigA = new SensorConfig();
        sensorConfigA.setServerHost(BACKEND_SERVER_NAME);
        sensorConfigA.setServerPort(BACKEND_SERVER_PORT);
        sensorConfigA.setServerDataEndPoint(BACKEND_SERVER_DATA_ENDPOINT);
        sensorConfigA.setPollingInterval(pollingInterval);
        sensorConfigA.setListenerPort(listenerPort);
        sensorConfigA.setSensorName(name);
        sensorConfigA.setTargetSensorPort(targetSensorPort);

        return new SensorTypeA(sensorConfigA);
    }
}
